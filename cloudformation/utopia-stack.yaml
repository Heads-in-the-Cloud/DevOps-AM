Description: Utopia CloudFormation Stack, including all Networking and Security

Parameters:
  EnvironmentName:
    Type: String
    Default: Utopia
  VPCCIDR:
    Type: String
    Default: 10.0.0.0/16
  SubnetPrivate1CIDR:
    Type: String
    Default: 10.0.1.0/24
  SubnetPrivate2CIDR:
    Type: String
    Default: 10.0.2.0/24
  SubnetPublic1CIDR:
    Type: String
    Default: 10.0.3.0/24
  SubnetPublic2CIDR:
    Type: String
    Default: 10.0.4.0/24
  DBUsername:
    Description: Enter an admin password for the created Database
    Type: String
    Default: username
  DBUserPassword:
    Description: Enter an admin username for the created Database
    Type: String
    Default: password
  BastionAmiID:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

Resources:

  ######################
  # Networking Section #
  ######################

  # VPC
  UtopiaVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub AM-VPC-${EnvironmentName}

  # Public Subnets
  SubnetPublic1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UtopiaVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref SubnetPublic1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-Public-1
  SubnetPublic2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UtopiaVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref SubnetPublic2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-Public-2

  # Private Subnets
  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UtopiaVPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: !Ref SubnetPrivate1CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-Private-1
  SubnetPrivate2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref UtopiaVPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: !Ref SubnetPrivate2CIDR
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-Private-2

  # Internet Gateway (public)
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-IGW
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref UtopiaVPC

  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref UtopiaVPC
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-Routes-Public
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicRouteAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic1
  PublicRouteAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref SubnetPublic2

  ###############
  # RDS Section #
  ###############

  # Networking
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Private Subnets for DB Usage
      DBSubnetGroupName: subnet-group-private
      SubnetIds:
        - !Ref SubnetPrivate1
        - !Ref SubnetPrivate2
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-DB-subnets

  # Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Access to RDS Instance over 3306 and SSH
      GroupName: am_db_security
      VpcId: !Ref UtopiaVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-DB-EC2-sg
  DBSecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: Allow Access to RDS Instance over 3306 and SSH
      EC2VpcId: !Ref UtopiaVPC
      DBSecurityGroupIngress:
        -
          EC2SecurityGroupId: !Ref EC2SecurityGroup
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-DB-sg

  # Database
  UtopiaDB:
    Type: AWS::RDS::DBInstance
    Properties:
      AllocatedStorage: 20
      Engine: mysql
      EngineVersion: 8.0.23
      DBInstanceClass: db.t3.small
      DBSubnetGroupName: !Ref DBSubnetGroup
      DBName: utopia
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBUserPassword
      DBSecurityGroups:
        - !Ref DBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-DB-SQL

  ################
  # Bastion Host #
  ################

  # IAM Profile and Policies
  BastionIAMProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub AM-${EnvironmentName}-Bastion-Profile
      Path: /
      Roles:
        -
          Ref: BastionIAMRole
  BastionIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - 'sts:AssumeRole'
            Principal:
              Service:
                - ec2.amazonaws.com
      RoleName: !Sub AM-${EnvironmentName}-Bastion-Role
      Path: /
  BastionRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub AM-${EnvironmentName}-Bastion-S3-Access-Policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: 's3:*'
            Resource: '*'
      Roles:
        - !Ref BastionIAMRole

  # Instance
  BastionHost:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref BastionAmiID
      InstanceType: t2.micro
      IamInstanceProfile: !Ref BastionIAMProfile
      NetworkInterfaces:
        - AssociatePublicIpAddress: true
          DeviceIndex: 0
          GroupSet:
            - !Ref EC2SecurityGroup
          SubnetId: !Ref SubnetPublic1
      KeyName: bastion_key
      Tags:
        - Key: Name
          Value: !Sub AM-${EnvironmentName}-BastionHost

# end

Outputs:
  VPC:
    Description: References the created Utopia-VPC
    Value: !Ref UtopiaVPC
