pipeline {
    agent {label 'aws-ready'}
    environment {
        ECS_CONTEXT_NAME = "am_aws"
        AWS_ACCOUNT_ID = "${sh(script:'aws sts get-caller-identity --query "Account" --output text', returnStdout: true).trim()}"
        AWS_REGION_ID = "${sh(script:'aws configure get region', returnStdout: true).trim()}"
    }

    parameters {
        booleanParam(name: "DESTROY", defaultValue: false)
    }

    stages {
        stage('Load Environment') {
            when { expression { !params.DESTROY } }
            steps {
                echo 'Loading Environment'
                script {
                    withCredentials([
                        string(credentialsId: 'dev/AM/utopia-secrets',
                        variable: 'DB_CREDS')
                    ]) {
                        // def outputs = readProperties file: '/var/lib/jenkins-worker-node/AM-resources/env.tf'
                        def jsonObj = readJSON text: DB_CREDS
                        env.AWS_RDS_USERNAME    = jsonObj.DB_USERNAME
                        env.AWS_RDS_PASSWORD    = jsonObj.DB_PASSWORD
                        env.AWS_VPC_ID          = jsonObj.AWS_VPC_ID
                        env.AWS_RDS_ENDPOINT    = jsonObj.AWS_RDS_ENDPOINT
                        env.AWS_ALB_ID          = jsonObj.AWS_ALB_ID
                    }
                }
            }
        }

        stage('Push ECS') {
            when { expression { !params.DESTROY } }
            steps {
                echo 'Configuring ECS'
                dir("am-ecs") {
                    sh 'docker context use ${ECS_CONTEXT_NAME}'
                    sh 'aws ecr get-login-password --region ${AWS_REGION_ID} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION_ID}.amazonaws.com'
                    sh 'docker compose up --no-color'
                }
            }
        }

        stage('Destroy ECS') {
            when { expression { params.DESTROY } }
            steps {
                echo 'Destroying ECS'
                dir('am-ecs') {
                    sh 'docker context use ${ECS_CONTEXT_NAME}'
                    sh 'docker compose down'
                }
            }
        }
    }
}
