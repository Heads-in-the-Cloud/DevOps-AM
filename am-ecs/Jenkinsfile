pipeline {
    agent {
        node {
            label 'aws-ready'
            customWorkspace "${AM_DEVOPS_DIRECTORY}"
        }
    }

    environment {
        SECRET_ID = "${AM_SECRET_ID}"

        ECS_MEM_LIMIT   = "1024M"
        ECS_MEM_REQUEST = "256M"
        ECS_CPU_LIMIT   = "1.0"
        ECS_CPU_REQUEST = "0.5"
        ECS_REPLICAS    = "2"

        DB_POOL_MIN     = 2
        DB_POOL_MAX     = 4

        // AWS Region Override
        AWS_PROFILE     = "am_aws"
    }

    stages {
        stage('Load Environment') {
            steps {
                sh 'aws configure set region ${AWS_REGION_ID} --profile ${AWS_PROFILE_NAME}'
                script {
                    // Get env from Secrets
                    secret = sh(returnStdout: true, script: 'aws secretsmanager get-secret-value --secret-id ${SECRET_ID} | jq -Mr \'.SecretString\'').trim()
                    def jsonObj = readJSON text: secret
                    env.AWS_RDS_USERNAME    = jsonObj.DB_USERNAME
                    env.AWS_RDS_PASSWORD    = jsonObj.DB_PASSWORD
                    env.AWS_VPC_ID          = jsonObj.AWS_VPC_ID
                    env.AWS_RDS_ENDPOINT    = jsonObj.AWS_RDS_ENDPOINT
                    env.AWS_ALB_ID          = jsonObj.AWS_ALB_ID
                    env.AWS_ECS_SG          = jsonObj.AWS_ECS_SG

                    // Get env from aws-cli
                    def subnets_private = sh(returnStdout: true, script: """
                        aws ec2 describe-subnets --filters Name=vpc-id,Values=${AWS_VPC_ID} \
                        --query 'Subnets[?MapPublicIpOnLaunch==`false`].SubnetId' \
                        | grep subnet | sed 's/[," ]//g'
                    """).readLines()
                    env.PRIVATE_SUBNET_1 = subnets_private[0]
                    env.PRIVATE_SUBNET_2 = subnets_private[1]
                }
            }
        }

        stage('Fill Template') {
            steps {
                echo 'Inserting certain Environment Variables into docker-compose'
                dir("am-ecs") {
                    sh '''
                        envsubst \' \
                        $ECS_MEM_LIMIT \
                        $ECS_MEM_REQUEST \
                        $ECS_CPU_LIMIT \
                        $ECS_CPU_REQUEST \
                        $ECS_REPLICAS \
                        $AWS_ACCOUNT_ID \
                        $AWS_REGION_ID \
                        $AWS_VPC_ID \
                        $AWS_ALB_ID \
                        $DB_POOL_MIN \
                        $DB_POOL_MAX \
                        $AWS_ECS_SG \
                        $PRIVATE_SUBNET_1 \
                        $PRIVATE_SUBNET_2 \
                        \' < docker-compose-template.yml > docker-compose.yml
                    '''
                }
            }
        }

        stage('Configure') {
            steps {
                echo 'Configuring ECS'
                sh 'aws configure set region ${AWS_REGION_ID} --profile ${AWS_PROFILE_NAME}'
                sh 'docker context use ${AWS_PROFILE_NAME}'
                sh 'aws ecr get-login-password --region ${AWS_REGION_ID} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION_ID}.amazonaws.com'
            }
        }

        stage('Push ECS') {
            steps {
                echo 'Pushing Up to ECS'
                dir("am-ecs") {
                    sh 'docker compose up'
                }
            }
        }

        // end stages
    }
}
