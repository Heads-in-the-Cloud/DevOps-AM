---
#################################################
#    EC2 Deploy via Terraform Infrastructure    #
#################################################

- name: Get VPC Info
  hosts: localhost
  connection: local
  vars:
    ec2_ssh_keyname: bastion_key_cf
    ec2_ami_image: ami-054965c6cd7c6e462
    environment_name: AM-Utopia-ansible
  tasks:

    ##################
    # Load Variables #
    ##################
    - name: Load Variables
      include_vars:
        file: ./vars/dynamic/tf_output_vars.yaml
        name: tf_vars
      tags: ['always']

    #######################
    # Get Networking Info #   // gets Networking values using Terraform outputs
    #######################
    - name: VPC Block
      block:
        - name: Get VPC Object
          ec2_vpc_net_info:
            region: "{{ tf_vars.aws_region }}"
            filters:
              "state": available
              "vpc-id": "{{ tf_vars.vpc_id }}"
          register: vpc_return

        - name: Validate VPC Exists
          fail:
            msg: "Specified VPC '{{ tf_vars.vpc_id }}' does not exist or is not available."
          when: vpc_return.vpcs[0] is undefined

        - name: List VPC Info
          debug:
            msg: "Using VPC with ID: {{ vpc_return.vpcs[0].vpc_id }}"
      tags: ['never', 'ansible-init', 'ansible-get-network']

    ############
    # Security #
    ############
    - name: Security Block
      block:
        - name: Create EC2 Security Group
          ec2_group:
            name: "{{ environment_name }}-ec2-SG"
            description: Ansible Security Group for EC2 access
            vpc_id: "{{ vpc_return.vpcs[0].vpc_id }}"
            region: "{{ tf_vars.aws_region }}"
            rules:
              - proto: tcp
                ports:
                  - 22
                cidr_ip: 0.0.0.0/0
                rule_desc: Allow all SSH
      tags: ['never', 'ansible-init', 'ansible-security']

    ####################
    # Launch Resources #
    ####################
    - name: Launch Block
      block:
        - name: Create a Public RHEL8 EC2 instance
          ec2:
            region: "{{ tf_vars.aws_region }}"
            vpc_subnet_id: "{{ tf_vars.subnet_public_1_id }}"
            group: AM-ansible-SG
            count: 1
            instance_type: t2.micro
            wait: yes
            assign_public_ip: yes
            key_name: "{{ ec2_ssh_keyname }}"
            image: "{{ ec2_ami_image }}"
          register: "{{ environment_name }}_ec2_instance"

        - name: Add Tags to EC2 Instance
          ec2_tag:
            resource: "{{ AM_ansible_ec2_instance.instances[0].id }}"
      tags: ['never', 'ansible-init', 'ansible-create-resources']
