---
###############################################################################
#    EKS CLUSTER DEPLOY AND UPDATE MODULE                                     #
###############################################################################
#
# Tags:
#
#  - eks-init: inclusive tag for a full initial setup, to be run once.
#              Runs the below in order:
#
#    - eks-configure: first-time startup config, to be run once.
#    - eks-create:    pod and API creation, run on any API update.
#    - eks-post:      updates Route53, to be run after configure and create.
#
###############################################################################
#    EKS CLUSTER DEPLOY AND UPDATE MODULE                                     #
###############################################################################

- name: Deploy to EKS Cluster
  hosts: localhost
  connection: local
  vars:
    eks_location: "../kubernetes"
    eks_api_namespace: apis-ns
  tasks:

    #########################
    # Secrets and Variables #
    #########################
    - name: Get Utopia Secrets
      debug:
        msg: "{{ lookup('aws_secret', 'dev/AM/utopia-secrets') }}"
      register: utopia_secret
      tags: ['always', 'eks-init']

    ##################
    # Access Cluster #
    ##################
    - name: Access Cluster
      shell: |
        aws eks --region {{AWS_REGION_ID}} update-kubeconfig --name {{utopia_secret.msg.AWS_EKS_CLUSTER_NAME}}
      tags: ['always', 'eks-init']

    #################
    # EKS Configure #  // runs initially to set up environment.
    #################
    - name: EKS-Configure Block
      block:

        # Create Ingress default resources
        - name: Ingress setup
          shell: |
            kubectl apply -f ns-sa.yaml
            kubectl apply -f default-server-secret.yaml --namespace nginx-ingress
          args:
            chdir: "{{ eks_location }}/init"

        # Create custom Ingress configs
        - name: Configs setup
          shell: |
            kubectl apply -f . --namespace nginx-ingress
          args:
            chdir: "{{ eks_location }}/eks-custom"

        # Create custom Ingress resources
        - name: Ingress Control setup
          shell: |
            kubectl apply -f . --namespace nginx-ingress
          args:
            chdir: "{{ eks_location }}/eks-config"

        # Wait for Ingress to come online
        - name: Ingress wait
          shell: |
            kubectl wait --namespace nginx-ingress \
                --for=condition=ready pod \
                --selector=app.component=controller \
                --timeout=180s

        # Create secret for use by APIs
        - name: Secret create
          shell: |
            kubectl create secret generic utopia-secret \
              --from-literal=DB_NAME=utopia \
              --from-literal=DB_PORT=3306 \
              --from-literal=DB_TYPE=mysql \
              --from-literal=DB_ADDRESS="{{utopia_secret.msg.AWS_RDS_ENDPOINT}}" \
              --from-literal=DB_USERNAME="{{utopia_secret.msg.DB_USERNAME}}" \
              --from-literal=DB_PASSWORD="{{utopia_secret.msg.DB_PASSWORD}}" \
              --from-literal=DB_CONNECTION_POOL_MIN="{{DB_POOL_MIN}}" \
              --from-literal=DB_CONNECTION_POOL_MAX="{{DB_POOL_MAX}}" \
              --namespace {{eks_api_namespace}}
      tags: ['never', 'eks-init', 'eks-configure']

    #############
    # EKS Build #  // runs on create and update to maintain pods.
    #############
    - name: EKS-Create Block
      block:
        # Create custom API Objects from definitions
        - name: Create APIs
          shell: |
            for f in $(find *.yaml); do envsubst < $f | kubectl --namespace {{eks_api_namespace}} apply -f -; done
          args:
            chdir: "{{ eks_location }}/objects"
          environment:
            # envsubst requires linux-level environment variables
            EKS_CONTAINER_CPU_LIMIT: {{EKS_CONTAINER_CPU_LIMIT}}
            EKS_CONTAINER_CPU_REQUEST: {{EKS_CONTAINER_CPU_REQUEST}}
            EKS_CONTAINER_MEM_LIMIT: {{EKS_CONTAINER_MEM_LIMIT}}
            EKS_CONTAINER_MEM_REQUEST: {{EKS_CONTAINER_MEM_REQUEST}}
            EKS_REPLICA_COUNT: {{EKS_REPLICA_COUNT}}

            AWS_ACCOUNT_ID: {{AWS_ACCOUNT_ID}}
            AWS_REGION_ID: {{AWS_REGION_ID}}

            FLIGHTS_API_LATEST: {{FLIGHTS_API_LATEST}}
            BOOKINGS_API_LATEST: {{BOOKINGS_API_LATEST}}
            USERS_API_LATEST: {{USERS_API_LATEST}}
            AUTH_API_LATEST: {{AUTH_API_LATEST}}

      tags: ['never', 'eks-init', 'eks-create', 'eks-update']

      ############
      # EKS Post #  // runs after initialization and first pod creation for updates.
      ############
    - name: EKS-Post Block
      block:

        # Get LoadBalancer address and store
        - name: Get LoadBalancer
          shell: |
            kubectl get svc --namespace=nginx-ingress | awk 'NR==2{print $4}'
          register: LB_ADDRESS

        # Show LoadBalancer address output
        - debug: var=LB_ADDRESS.stdout

        # Register Route53 change
        - name: Register Route53
          route53:
            state: present
            hosted_zone_id: "{{ AWS_HOSTED_ZONE_ID }}"
            record: "{{ EKS_RECORD_NAME }}"
            ttl: 60
            type: CNAME
            value:
              - "{{ LB_ADDRESS.stdout }}"
      tags: ['never', 'eks-init', 'eks-post']
