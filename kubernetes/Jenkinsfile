pipeline {
    agent {
        node {
            label 'aws-ready'
            customWorkspace "${AM_DEVOPS_DIRECTORY}"
        }
    }

    environment {
        // AWS references
        AWS_SECRET_ID             = 'dev/AM/utopia-secrets'
        AWS_PROFILE               = "${AWS_PROFILE_NAME}"
        AWS_ACCESS_KEY            = credentials('AM_AWS_ACCESS')
        AWS_SECRET_KEY            = credentials('AM_AWS_SECRET')

        // Ansible API Info
        DB_POOL_MIN               = 2
        DB_POOL_MAX               = 4

        // Ansible EKS specific
        // for t2.medium: 1930m cpu, 3332Mi, 4 pods max
        EKS_CONTAINER_CPU_LIMIT   = "450m"
        EKS_CONTAINER_CPU_REQUEST = "250m"
        EKS_CONTAINER_MEM_LIMIT   = "800Mi"
        EKS_CONTAINER_MEM_REQUEST = "400Mi"
        EKS_REPLICA_COUNT         = 2
    }

    stages {
        stage('Load Environment') {
            steps {
                sh 'aws configure set region ${AWS_REGION_ID} --profile ${AWS_PROFILE_NAME}'
                script {
                    // Load from AWS Secret
                    secret = sh(returnStdout: true, script: 'aws secretsmanager get-secret-value --secret-id ${AWS_SECRET_ID} | jq -Mr \'.SecretString\'').trim()
                    def jsonObj = readJSON text: secret

                    env.AWS_RDS_ENDPOINT   = jsonObj.AWS_RDS_ENDPOINT
                    env.TOWER_AUTH         = jsonObj.ANSIBLE_TOKEN

                    // Load from Terraform Output
                    env.EKS_RECORD_NAME    = sh(returnStdout: true, script: "cd ${AM_DEVOPS_DIRECTORY}/terraform; terraform output | grep EKS_RECORD | sed 's/.*= //; s/\"//g'")
                }
            }
        }

        stage('Load Images') {
            steps {
                echo "Loading latest image hashes"
                dir("${AM_RESOURCES_DIRECTORY}") {
                    script {
                        env.USERS_API_LATEST = sh(script:'jq -Mr \'.users\' images-${AWS_REGION_ID}.json', returnStdout: true)
                        env.BOOKINGS_API_LATEST = sh(script:'jq -Mr \'.bookings\' images-${AWS_REGION_ID}.json', returnStdout: true)
                        env.FLIGHTS_API_LATEST = sh(script:'jq -Mr \'.flights\' images-${AWS_REGION_ID}.json', returnStdout: true)
                        env.AUTH_API_LATEST = sh(script:'jq -Mr \'.auth\' images-${AWS_REGION_ID}.json', returnStdout: true)
                    }
                }
            }
        }

        stage('Ansible Tower Outsource') {
            steps {
                echo 'Running Ansible Tower connection'
                script {
                    ansibleTower(
                        towerServer: 'AM-Ansible-Tower-EC2',
                        jobTemplate: 'AM_K8S_Launch',
                        extraVars: '''
                            AWS_REGION_ID: "${AWS_REGION_ID}"
                            AWS_ACCOUNT_ID: "${AWS_ACCOUNT_ID}"
                            AWS_RDS_ENDPOINT: "${AWS_RDS_ENDPOINT}"
                            AWS_HOSTED_ZONE_ID: "${AWS_HOSTED_ZONE_ID}"
                            AWS_SECRET_ID: "${AWS_SECRET_ID}"

                            EKS_CONTAINER_CPU_LIMIT: "${EKS_CONTAINER_CPU_LIMIT}"
                            EKS_CONTAINER_CPU_REQUEST: "${EKS_CONTAINER_CPU_REQUEST}"
                            EKS_CONTAINER_MEM_LIMIT: "${EKS_CONTAINER_MEM_LIMIT}"
                            EKS_CONTAINER_MEM_REQUEST: "${EKS_CONTAINER_MEM_REQUEST}"

                            FLIGHTS_API_LATEST: "${FLIGHTS_API_LATEST}"
                            BOOKINGS_API_LATEST: "${BOOKINGS_API_LATEST}"
                            USERS_API_LATEST: "${USERS_API_LATEST}"
                            AUTH_API_LATEST: "${AUTH_API_LATEST}"

                            DB_POOL_MIN: "${DB_POOL_MIN}"
                            DB_POOL_MAX: "${DB_POOL_MAX}"
                        '''
                    )
                }
            }
        }

        // end stages
    }
}
