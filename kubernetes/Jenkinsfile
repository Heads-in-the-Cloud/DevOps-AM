pipeline {
    agent {label 'aws-ready'}
    environment {
        AWS_ACCOUNT_ID = "${sh(script:'aws sts get-caller-identity --query "Account" --output text', returnStdout: true).trim()}"
        AWS_REGION_ID = "${sh(script:'aws configure get region', returnStdout: true).trim()}"
        SECRET_ID = 'dev/AM/utopia-secrets'
        EKS_CLUSTER_NAME = 'AM-eks-cluster'
    }

    stages {
        stage('Load Environment') {
            when { expression { !params.DESTROY } }
            steps {
                echo 'Loading Environment'
                script {
                    withCredentials([
                        string(credentialsId: SECRET_ID,
                        variable: 'DB_CREDS')
                    ]) {
                        def jsonObj = readJSON text: DB_CREDS
                        env.AWS_RDS_USERNAME    = jsonObj.DB_USERNAME
                        env.AWS_RDS_PASSWORD    = jsonObj.DB_PASSWORD
                        env.AWS_RDS_ENDPOINT    = jsonObj.AWS_RDS_ENDPOINT
                    }
                }
            }
        }

        stage('Push ECS') {
            steps {
                echo 'Preparing EKS materials'
                sh 'docker context use default'
                sh 'aws eks --region ${AWS_REGION_ID} update-kubeconfig --name ${EKS_CLUSTER_NAME}'
                sh 'aws ecr get-login-password --region ${AWS_REGION_ID} | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION_ID}.amazonaws.com'
            }
        }

        stage('Destroy ECS') {
            steps {
                echo 'Running Kubernetes Initialization'
                sh 'kubernetes/eks-init.sh'
            }
        }
    }
}
